{"version":3,"sources":["history.js","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Recipes","props","state","recipes","selectedIndex","_ToggleNext","bind","_TogglePrev","axios","get","then","response","setState","data","console","log","catch","error","this","length","prevState","Card","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","title","createdts","updated_ts","color","cuisine","prep_time_in_min","cook_time_in_min","servings","ingredients","map","ingredient","steps","step","items","nutritionInformation","calories","cholesterol_in_mg","sodium_in_mg","carbohydrates_in_grams","protein_in_grams","Button","size","onClick","Component","App","history","style","float","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae59e040.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './Recipes.css'\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class Recipes extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes:[],\n      selectedIndex: 0\n    };\n    this._ToggleNext = this._ToggleNext.bind(this);\n    this._TogglePrev = this._TogglePrev.bind(this);\n  }\n\n  componentDidMount(){  \n    axios.get(\"http://localhost:8080/v1/allrecipes\")\n      .then((response) => {\n        this.setState({recipes: response.data,\n                       selectedIndex: 0 \n        });\n        console.log(\"hello\"+ response.data)\n      })\n      .catch(error => {\n        this.setState(error)\n        console.log(error)\n      });\n  }\n \n  _ToggleNext(){\n    console.log(\"Next clicked\");\n    let {recipes, selectedIndex} = this.state;\n    var max = recipes.length;\n    \n    if(selectedIndex === max-1)\n      return;\n\n    this.setState(prevState => ({\n      selectedIndex: prevState.selectedIndex+1\n    }))\n    \n    console.log(this.state.selectedIndex)\n  }\n\n  _TogglePrev(){\n    console.log(\"Previous clicked\");\n    let {selectedIndex} = this.state;\n\n    if(selectedIndex === 0)\n      return;\n    \n    this.setState(prevState => ({\n      selectedIndex: prevState.selectedIndex-1\n    }))\n\n    console.log(this.state.selectedIndex)\n  }\n\n  \n  render() {\n    let { recipes, selectedIndex, error } = this.state;\n\n    console.log(\"Render\" +recipes)\n    if(error){\n      return <div><h1>Something went wrong</h1></div>\n    } else if(recipes.length > 0) {\n      return (\n        <Card className=\"card\">\n        <CardActionArea>\n        <CardContent>\n        <div>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">{recipes[selectedIndex].title}</Typography>\n              <div><small><i>Posted on: {recipes[selectedIndex].createdts}</i></small></div>\n              <div><small><i>Last Updated on: {recipes[selectedIndex].updated_ts}</i></small></div>\n              <div>\n              <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Cuisine:</b> {recipes[selectedIndex].cuisine}</p></Typography>\n              <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Preparation Time:</b> {recipes[selectedIndex].prep_time_in_min} minutes</p></Typography>\n              <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Cooking Time:</b> {recipes[selectedIndex].cook_time_in_min} minutes</p></Typography>\n              <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>No. of Servings:</b> {recipes[selectedIndex].servings}</p></Typography>\n\n                  <div><Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Ingredients:</b></p></Typography>\n                    \n                      {\n                        recipes[selectedIndex].ingredients.map((ingredient) =>{\n                          return (<li>{ingredient}</li>);\n                        })\n                      }\n                  </div>\n                  \n\n                  <div><Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Steps</b></p></Typography>\n                  \n                  \n                      {\n                        recipes[selectedIndex].steps.map((step) =>{\n                          return (<li>{step.items}</li>);\n                        })\n                      }\n                    </div>\n                    \n                  </div><Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Nutrition</b></p></Typography>\n                  <div>\n                  <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Calories:</b> {recipes[selectedIndex].nutritionInformation.calories}</p></Typography>\n                  <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Cholesterol:</b> {recipes[selectedIndex].nutritionInformation.cholesterol_in_mg} mg</p></Typography>\n                  <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Sodium:</b> {recipes[selectedIndex].nutritionInformation.sodium_in_mg} mg</p></Typography>\n                  <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Carbohydrates:</b> {recipes[selectedIndex].nutritionInformation.carbohydrates_in_grams} g</p></Typography>\n                  <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\"><p><b>Proteins:</b> {recipes[selectedIndex].nutritionInformation.protein_in_grams} g</p></Typography>\n                  </div><div>\n                  </div>\n              </div>\n          \n        \n        <div>  \n        <Button size=\"small\" color=\"primary\" onClick={this._TogglePrev}>Previous</Button>\n        <Button size=\"small\" color=\"primary\" onClick={this._ToggleNext}>Next</Button>\n        </div>\n        </CardContent>\n        </CardActionArea>\n        </Card>\n      )\n    } else {\n      return null;\n    }\n  }\n}","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport history from \"./history.js\";\nimport Recipes from \"./components/Recipes.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n      <div className=\"App-header\">\n          <span style={{float:\"right\"}}>RECIPES</span>\n      </div>\n      <Switch>\n        <Route exact path=\"/recipes\" component={Recipes}></Route>\n      </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}